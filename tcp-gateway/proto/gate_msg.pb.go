// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gate_msg.proto

package gate_msg

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GatewayMsgKind int32

const (
	GatewayMsgKind_Json     GatewayMsgKind = 0
	GatewayMsgKind_ProtoBuf GatewayMsgKind = 1
)

var GatewayMsgKind_name = map[int32]string{
	0: "Json",
	1: "ProtoBuf",
}

var GatewayMsgKind_value = map[string]int32{
	"Json":     0,
	"ProtoBuf": 1,
}

func (x GatewayMsgKind) String() string {
	return proto.EnumName(GatewayMsgKind_name, int32(x))
}

func (GatewayMsgKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a40534712610c588, []int{0}
}

type GatewayMsgPhase int32

const (
	GatewayMsgPhase_Handshake  GatewayMsgPhase = 0
	GatewayMsgPhase_Communcate GatewayMsgPhase = 1
)

var GatewayMsgPhase_name = map[int32]string{
	0: "Handshake",
	1: "Communcate",
}

var GatewayMsgPhase_value = map[string]int32{
	"Handshake":  0,
	"Communcate": 1,
}

func (x GatewayMsgPhase) String() string {
	return proto.EnumName(GatewayMsgPhase_name, int32(x))
}

func (GatewayMsgPhase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a40534712610c588, []int{1}
}

// 网关握手协议消息
type GatewayMsg struct {
	ServerName           string          `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	Kind                 GatewayMsgKind  `protobuf:"varint,2,opt,name=kind,proto3,enum=GatewayMsgKind" json:"kind,omitempty"`
	Phase                GatewayMsgPhase `protobuf:"varint,3,opt,name=phase,proto3,enum=GatewayMsgPhase" json:"phase,omitempty"`
	Code                 uint32          `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Message              string          `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Body                 []byte          `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GatewayMsg) Reset()         { *m = GatewayMsg{} }
func (m *GatewayMsg) String() string { return proto.CompactTextString(m) }
func (*GatewayMsg) ProtoMessage()    {}
func (*GatewayMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40534712610c588, []int{0}
}

func (m *GatewayMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayMsg.Unmarshal(m, b)
}
func (m *GatewayMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayMsg.Marshal(b, m, deterministic)
}
func (m *GatewayMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayMsg.Merge(m, src)
}
func (m *GatewayMsg) XXX_Size() int {
	return xxx_messageInfo_GatewayMsg.Size(m)
}
func (m *GatewayMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayMsg proto.InternalMessageInfo

func (m *GatewayMsg) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *GatewayMsg) GetKind() GatewayMsgKind {
	if m != nil {
		return m.Kind
	}
	return GatewayMsgKind_Json
}

func (m *GatewayMsg) GetPhase() GatewayMsgPhase {
	if m != nil {
		return m.Phase
	}
	return GatewayMsgPhase_Handshake
}

func (m *GatewayMsg) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GatewayMsg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GatewayMsg) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

// 长连接 通讯消息
type StreamMessage struct {
	MethodName           string   `protobuf:"bytes,1,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	Body                 []byte   `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamMessage) Reset()         { *m = StreamMessage{} }
func (m *StreamMessage) String() string { return proto.CompactTextString(m) }
func (*StreamMessage) ProtoMessage()    {}
func (*StreamMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40534712610c588, []int{1}
}

func (m *StreamMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamMessage.Unmarshal(m, b)
}
func (m *StreamMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamMessage.Marshal(b, m, deterministic)
}
func (m *StreamMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamMessage.Merge(m, src)
}
func (m *StreamMessage) XXX_Size() int {
	return xxx_messageInfo_StreamMessage.Size(m)
}
func (m *StreamMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamMessage.DiscardUnknown(m)
}

var xxx_messageInfo_StreamMessage proto.InternalMessageInfo

func (m *StreamMessage) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *StreamMessage) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterEnum("GatewayMsgKind", GatewayMsgKind_name, GatewayMsgKind_value)
	proto.RegisterEnum("GatewayMsgPhase", GatewayMsgPhase_name, GatewayMsgPhase_value)
	proto.RegisterType((*GatewayMsg)(nil), "GatewayMsg")
	proto.RegisterType((*StreamMessage)(nil), "StreamMessage")
}

func init() { proto.RegisterFile("gate_msg.proto", fileDescriptor_a40534712610c588) }

var fileDescriptor_a40534712610c588 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x51, 0x6a, 0x02, 0x31,
	0x10, 0x86, 0x8d, 0x5d, 0xad, 0x8e, 0xba, 0x2e, 0xf3, 0x14, 0xfa, 0xe2, 0x62, 0xa1, 0x2c, 0x3e,
	0x88, 0xe8, 0x0d, 0xda, 0xd2, 0x96, 0x16, 0x8b, 0xac, 0x07, 0x90, 0x68, 0xa6, 0xab, 0x48, 0x12,
	0xd9, 0x44, 0x8b, 0x77, 0xeb, 0xe1, 0xca, 0x66, 0x2b, 0x56, 0xdf, 0xe6, 0xff, 0xe7, 0xcb, 0x24,
	0x7f, 0x06, 0xc2, 0x4c, 0x38, 0x5a, 0x28, 0x9b, 0x0d, 0x77, 0xb9, 0x71, 0xa6, 0xff, 0xc3, 0x00,
	0x5e, 0x85, 0xa3, 0x6f, 0x71, 0x9c, 0xda, 0x0c, 0x7b, 0xd0, 0xb2, 0x94, 0x1f, 0x28, 0x5f, 0x68,
	0xa1, 0x88, 0xb3, 0x98, 0x25, 0xcd, 0x14, 0x4a, 0xeb, 0x53, 0x28, 0xc2, 0x7b, 0x08, 0xb6, 0x1b,
	0x2d, 0x79, 0x35, 0x66, 0x49, 0x38, 0xee, 0x0e, 0xcf, 0x67, 0x3f, 0x36, 0x5a, 0xa6, 0xbe, 0x89,
	0x0f, 0x50, 0xdb, 0xad, 0x85, 0x25, 0x7e, 0xe3, 0xa9, 0xe8, 0x1f, 0x35, 0x2b, 0xfc, 0xb4, 0x6c,
	0x23, 0x42, 0xb0, 0x32, 0x92, 0x78, 0x10, 0xb3, 0xa4, 0x93, 0xfa, 0x1a, 0x39, 0xdc, 0x2a, 0xb2,
	0x56, 0x64, 0xc4, 0x6b, 0xfe, 0xf6, 0x93, 0x2c, 0xe8, 0xa5, 0x91, 0x47, 0x5e, 0x8f, 0x59, 0xd2,
	0x4e, 0x7d, 0xdd, 0x7f, 0x86, 0xce, 0xdc, 0xe5, 0x24, 0xd4, 0xf4, 0x0f, 0xea, 0x41, 0x4b, 0x91,
	0x5b, 0x1b, 0x79, 0x11, 0xa0, 0xb4, 0x7c, 0x80, 0xd3, 0x94, 0xea, 0x79, 0xca, 0x20, 0x81, 0xf0,
	0x32, 0x07, 0x36, 0x20, 0x78, 0xb7, 0x46, 0x47, 0x15, 0x6c, 0x43, 0x63, 0x56, 0xfc, 0xd4, 0xe3,
	0xfe, 0x2b, 0x62, 0x83, 0x11, 0x74, 0xaf, 0xb2, 0x60, 0x07, 0x9a, 0x6f, 0x42, 0x4b, 0xbb, 0x16,
	0x5b, 0x8a, 0x2a, 0x18, 0x02, 0x3c, 0x19, 0xa5, 0xf6, 0x7a, 0x25, 0x1c, 0x45, 0x6c, 0xfc, 0x02,
	0xdd, 0x42, 0x1b, 0x5d, 0xbe, 0x73, 0x7e, 0xc8, 0x71, 0x02, 0xad, 0x12, 0xd9, 0x14, 0x0c, 0x86,
	0xc3, 0x8b, 0x08, 0x77, 0x57, 0xba, 0x5f, 0x49, 0xd8, 0x88, 0x2d, 0xeb, 0x7e, 0x5f, 0x93, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x9b, 0x11, 0x32, 0xc1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommonStreamSvrClient is the client API for CommonStreamSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommonStreamSvrClient interface {
	Communicate(ctx context.Context, opts ...grpc.CallOption) (CommonStreamSvr_CommunicateClient, error)
}

type commonStreamSvrClient struct {
	cc *grpc.ClientConn
}

func NewCommonStreamSvrClient(cc *grpc.ClientConn) CommonStreamSvrClient {
	return &commonStreamSvrClient{cc}
}

func (c *commonStreamSvrClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (CommonStreamSvr_CommunicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CommonStreamSvr_serviceDesc.Streams[0], "/CommonStreamSvr/Communicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &commonStreamSvrCommunicateClient{stream}
	return x, nil
}

type CommonStreamSvr_CommunicateClient interface {
	Send(*StreamMessage) error
	Recv() (*StreamMessage, error)
	grpc.ClientStream
}

type commonStreamSvrCommunicateClient struct {
	grpc.ClientStream
}

func (x *commonStreamSvrCommunicateClient) Send(m *StreamMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *commonStreamSvrCommunicateClient) Recv() (*StreamMessage, error) {
	m := new(StreamMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommonStreamSvrServer is the server API for CommonStreamSvr service.
type CommonStreamSvrServer interface {
	Communicate(CommonStreamSvr_CommunicateServer) error
}

// UnimplementedCommonStreamSvrServer can be embedded to have forward compatible implementations.
type UnimplementedCommonStreamSvrServer struct {
}

func (*UnimplementedCommonStreamSvrServer) Communicate(srv CommonStreamSvr_CommunicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}

func RegisterCommonStreamSvrServer(s *grpc.Server, srv CommonStreamSvrServer) {
	s.RegisterService(&_CommonStreamSvr_serviceDesc, srv)
}

func _CommonStreamSvr_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommonStreamSvrServer).Communicate(&commonStreamSvrCommunicateServer{stream})
}

type CommonStreamSvr_CommunicateServer interface {
	Send(*StreamMessage) error
	Recv() (*StreamMessage, error)
	grpc.ServerStream
}

type commonStreamSvrCommunicateServer struct {
	grpc.ServerStream
}

func (x *commonStreamSvrCommunicateServer) Send(m *StreamMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *commonStreamSvrCommunicateServer) Recv() (*StreamMessage, error) {
	m := new(StreamMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CommonStreamSvr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CommonStreamSvr",
	HandlerType: (*CommonStreamSvrServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Communicate",
			Handler:       _CommonStreamSvr_Communicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gate_msg.proto",
}
